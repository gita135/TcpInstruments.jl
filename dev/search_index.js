var documenterSearchIndex = {"docs":
[{"location":"general_functions/","page":"General Functions","title":"General Functions","text":"CurrentModule = TcpInstruments","category":"page"},{"location":"general_functions/#General-functions","page":"General Functions","title":"General functions","text":"","category":"section"},{"location":"general_functions/","page":"General Functions","title":"General Functions","text":"CurrentModule = TcpInstruments","category":"page"},{"location":"general_functions/","page":"General Functions","title":"General Functions","text":"initialize\nterminate\ninfo\nscan_network\nsave\nload","category":"page"},{"location":"general_functions/","page":"General Functions","title":"General Functions","text":"initialize\nterminate\ninfo\nscan_network\nsave\nload","category":"page"},{"location":"general_functions/#InstrumentConfig.initialize","page":"General Functions","title":"InstrumentConfig.initialize","text":"initialize(model::Type{Instrument})\ninitialize(model::Type{Instrument}, address::String; GPIB_ID::Int=-1)\n\nInitializes a connection to the instrument at the given (input) IP address.\n\nArguments\n\nmodel: The device type you are connecting to. Use help> Instrument to see available options\naddress (optional): The ip address of the device. Ex. \"10.3.30.23\". If not provided, TcpInstruments will look for the address in the config file\n\nKeywords\n\nGPIB_ID: The GPIB interface ID of your device. This is optional and doesn't need to be set unless you are using a prologix controller to control it remotely\n\n\n\n\n\n","category":"function"},{"location":"general_functions/#InstrumentConfig.terminate","page":"General Functions","title":"InstrumentConfig.terminate","text":"terminate(instr::Instrument)\n\nCloses the TCP connection.\n\n\n\n\n\n","category":"function"},{"location":"general_functions/#TcpInstruments.info","page":"General Functions","title":"TcpInstruments.info","text":"info(instr::Instrument)\n\nAsks an instrument to print model number and other device info.\n\n\n\n\n\n","category":"function"},{"location":"general_functions/#TcpInstruments.scan_network","page":"General Functions","title":"TcpInstruments.scan_network","text":"scan_network(; network_id=\"10.1.30.0\", host_range=1:255)\n\nBy default, report all found devices between addresses 10.1.30.1 to 10.1.30.255.\n\nSearches for devices connected on port:\n\n5025 (scpi)\n1234 (prologix)\n\n\n\n\n\n","category":"function"},{"location":"general_functions/#TcpInstruments.save","page":"General Functions","title":"TcpInstruments.save","text":"save(data)\nsave(data; format=:matlab)\nsave(data; filename=\"custom_file_name.ext\")\n\nSave data to a file\n\nBy default saves to julia format (.jld2) but can also export data to matlab by using the format=:matlab keyword argument\n\n\n\n\n\n","category":"function"},{"location":"general_functions/#TcpInstruments.load","page":"General Functions","title":"TcpInstruments.load","text":"data = load(\"file.jld2\")\n\nLoads saved data from a file\n\n\n\n\n\n","category":"function"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"CurrentModule = TcpInstruments","category":"page"},{"location":"instrument_functions/#Impedance-Analyzer","page":"Instrument-specific Functions","title":"Impedance Analyzer","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: ImpedanceAnalyzer && t != ImpedanceAnalyzer","category":"page"},{"location":"instrument_functions/#TcpInstruments.Agilent4294A","page":"Instrument-specific Functions","title":"TcpInstruments.Agilent4294A","text":"Supported functions\n\ninitialize\nterminate\n\nget_impedance\nget_impedance_analyzer_info\nset_measurement_to_complex\nset_measurement_to_impedance_and_phase\nget_channel\nset_channel\n\nis_average_mode_on\nget_num_averages\nget_sweep_direction\nget_point_delay_time\nget_sweep_delay_time\nget_frequency_limits\nset_frequency_limits\nget_frequency\nget_num_data_points\nset_num_data_points\nget_volt_dc\nset_volt_dc\nget_volt_ac\nset_volt_ac\nget_bandwidth\nset_bandwidth\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.Agilent4395A","page":"Instrument-specific Functions","title":"TcpInstruments.Agilent4395A","text":"Supported functions\n\ninitialize\nterminate\n\nget_impedance\nget_impedance_analyzer_info\nset_measurement_to_complex\nset_measurement_to_impedance_and_phase\nget_channel\nset_channel\n\nis_average_mode_on\nget_num_averages\nget_sweep_direction\nget_point_delay_time\nget_sweep_delay_time\nget_frequency_limits\nset_frequency_limits\nget_frequency\nget_num_data_points\nset_num_data_points\nget_volt_dc\nset_volt_dc\nget_volt_ac\nset_volt_ac\nget_bandwidth\nset_bandwidth\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.AgilentImpedAnalyzer","page":"Instrument-specific Functions","title":"TcpInstruments.AgilentImpedAnalyzer","text":"Supported models\n\nAgilent4294A\nAgilent4395A\n\nSupported functions\n\ninitialize\nterminate\n\nget_impedance\nget_impedance_analyzer_info\nset_measurement_to_complex\nset_measurement_to_impedance_and_phase\nget_channel\nset_channel\n\nis_average_mode_on\nget_num_averages\nget_sweep_direction\nget_point_delay_time\nget_sweep_delay_time\nget_frequency_limits\nset_frequency_limits\nget_frequency\nget_num_data_points\nset_num_data_points\nget_volt_dc\nset_volt_dc\nget_volt_ac\nset_volt_ac\nget_bandwidth\nset_bandwidth\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#Agilent-Impedance-Analyzer","page":"Instrument-specific Functions","title":"Agilent Impedance Analyzer","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/impedance_analyzer/agilent_common.jl\"]","category":"page"},{"location":"instrument_functions/#TcpInstruments.get_frequency-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_frequency","text":"get_frequency(ia::Instr{<:AgilentImpedAnalyzer})\n\nGet an array of frequency values with the same number of points as the data trace Output is in [MHz]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_frequency_limits-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_frequency_limits","text":"get_frequency_limits(ia::Instr{<:AgilentImpedAnalyzer})\n\nReturns\n\nTuple{Frequency, Frequency}: (lowerlimit, upperlimit)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_impedance_analyzer_info-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_impedance_analyzer_info","text":"get_impedance_analyzer_info(ia::Instr{<:AgilentImpedAnalyzer})\n\nGet current acquisition parameters from the impedance analyzer\n\ndcvoltage [V] acvoltage [V] numaverages bandwidthlevel [1, 2, 3, 4, 5] pointdelaytime [s] sweepdelaytime [s] sweep_direction [\"UP\", \"DOWN\"]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_num_averages-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_num_averages","text":"get_num_averages(ia::Instr{<:AgilentImpedAnalyzer})\n\nGet the number of sweep averages being used\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_num_data_points-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_num_data_points","text":"get_num_data_points(ia::Instr{<:AgilentImpedAnalyzer})\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_point_delay_time-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_point_delay_time","text":"get_point_delay_time(ia::Instr{<:AgilentImpedAnalyzer})\n\nGet time delay value used between data point acquisitions Output is in [s]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_sweep_delay_time-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_sweep_delay_time","text":"get_sweep_delay_time(ia::Instr{<:AgilentImpedAnalyzer})\n\nGet time delay value used between sweep acquisitions Output is in [s]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_sweep_direction-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_sweep_direction","text":"get_sweep_direction(ia::Instr{<:AgilentImpedAnalyzer})\n\nGet acquisition sweep direction Output is [\"UP\", \"DOWN\"]\n\n\"UP\": sweeps along increasing values (left to right on screen) \"DOWN\": sweeps along decreasing values (right to left on screen)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_volt_dc-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_volt_dc","text":"get_volt_dc(ia::Instr{<:AgilentImpedAnalyzer})\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.is_average_mode_on-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}}","page":"Instrument-specific Functions","title":"TcpInstruments.is_average_mode_on","text":"is_average_mode_on(ia::Instr{<:AgilentImpedAnalyzer})\n\nGet status for whether average mode is on Output is [true, false]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_frequency_limits-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}, Union{Unitful.Quantity{T, 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐓^-1, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐓^-1, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_frequency_limits","text":"set_frequency_limits(ia::Instr{<:AgilentImpedAnalyzer}, lower_limit, upper_limit)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_num_data_points-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}, Any}","page":"Instrument-specific Functions","title":"TcpInstruments.set_num_data_points","text":"set_num_data_points(ia::Instr{<:AgilentImpedAnalyzer}, num_points)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_volt_dc-Tuple{TcpInstruments.Instr{<:AgilentImpedAnalyzer}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_volt_dc","text":"set_volt_dc(ia::Instr{<:AgilentImpedAnalyzer}, volts)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/impedance_analyzer/Agilent4294A.jl\"]","category":"page"},{"location":"instrument_functions/#TcpInstruments.get_bandwidth-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_bandwidth","text":"get_bandwidth(instr)\n\nReturns bandwidth level (1-5)\n\nReturns\n\nInt: Between 1 and 5\n\n(Initial value) Specifies bandwidth 1 (shortest measurement time)\nSpecifies bandwidth 2\nSpecifies bandwidth 3\nSpecifies bandwidth 4\nSpecifies bandwidth 5 (longest measurement time, accurate\n\nmeasurement).\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_channel","text":"get_channel(i::Instr{Agilent4294A})\n\nReturns which channel is currently active, either 1 or 2.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_impedance-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_impedance","text":"get_impedance(Instr{Agilent4294A})\n\nGets the impedance from the impedance analyser. This function doesn't change any settings on the device, it only grabs data using the current settings.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_volt_ac-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_volt_ac","text":"get_volt_ac(instr)\n\nReturns oscillator (ac) voltage\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_bandwidth-Tuple{TcpInstruments.Instr{Agilent4294A}, Any}","page":"Instrument-specific Functions","title":"TcpInstruments.set_bandwidth","text":"set_bandwith(instr, n)\n\nSets bandwidth level (1-5)\n\nArguments\n\nn::Int: Desired bandwidth level (between 1 and 5)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_channel-Tuple{TcpInstruments.Instr{Agilent4294A}, Int64}","page":"Instrument-specific Functions","title":"TcpInstruments.set_channel","text":"set_channel(i::Instr{Agilent4294A}, n::Int)\n\nSets which channel the impedance analyser is using. n must be 1 or 2.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_measurement_to_complex-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_measurement_to_complex","text":"set_measurement_to_complex(ia::Instr{Agilent4294A})\n\nSet Traces A & B to measure Z & Y, respectively Z: Impedance (complex number R + jX) Y: Admittance (complex number G + jB)\n\nR: Equivalent series resistance X: Equivalent series reactance G: Equivalent parallel conductance B: Equivalent parallel susceptance\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_measurement_to_impedance_and_phase-Tuple{TcpInstruments.Instr{Agilent4294A}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_measurement_to_impedance_and_phase","text":"set_measurement_to_impedance_and_phase(ia::Instr{Agilent4294A})\n\nSet Traces A & B to measure |Z| & θ, respectively |Z|: Impedance amplitude (absolute value)   θ: Impedance phase\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_volt_ac-Tuple{TcpInstruments.Instr{Agilent4294A}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_volt_ac","text":"set_volt_ac(instr, voltage)\n\nArguments\n\nvoltage: Desired voltage, range for voltage setting: 5E-3 to 1\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/impedance_analyzer/Agilent4395A.jl\"]","category":"page"},{"location":"instrument_functions/#TcpInstruments.get_bandwith-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_bandwith","text":"Returns device bandwidth\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_channel","text":"Returns 1 or 2 depending on current channel\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_impedance-Tuple{TcpInstruments.Instr{Agilent4395A}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_impedance","text":"P. 3-10\n\nError corrected data The results of error correction are stored in the data arrays as complex number pairs. Formatted data\n\nThis is the array of data being displayed. It reflects all post-processing functions such as electrical delay, and the units of the array read out depends on the current display format.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_bandwith-Tuple{TcpInstruments.Instr{Agilent4395A}, Any}","page":"Instrument-specific Functions","title":"TcpInstruments.set_bandwith","text":"Pg.  B-3\n\n2, 10, 30, 100, 300, 1000 (=1k), 3000 (=3k), 10000 (=10k), 30000 (=30k) (Network and impedance analyzers)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_channel-Tuple{TcpInstruments.Instr{Agilent4395A}, Any}","page":"Instrument-specific Functions","title":"TcpInstruments.set_channel","text":"set_channel(i, channel_number)\n\nUses.\n\nset_channel(i, 1)\n\nset_channel(i, 2)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#Multimeter","page":"Instrument-specific Functions","title":"Multimeter","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: Multimeter && t != Multimeter","category":"page"},{"location":"instrument_functions/#TcpInstruments.KeysightDMM34465A","page":"Instrument-specific Functions","title":"TcpInstruments.KeysightDMM34465A","text":"Supported functions\n\ninitialize\nterminate\n\nget_channel\nget_voltage\nget_current\nget_resistance\nget_tc_temperature\nset_tc_type\nget_temp_unit\nset_temp_unit_celsius\nset_temp_unit_farenheit\nset_temp_unit_kelvin\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.KeysightMultimeter","page":"Instrument-specific Functions","title":"TcpInstruments.KeysightMultimeter","text":"Supported models\n\nKeysightDMM34465A\n\nSupported functions\n\ninitialize\nterminate\n\nget_channel\nget_voltage\nget_current\nget_resistance\nget_tc_temperature\nset_tc_type\nget_temp_unit\nset_temp_unit_celsius\nset_temp_unit_farenheit\nset_temp_unit_kelvin\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#Keysight-Multimeter","page":"Instrument-specific Functions","title":"Keysight Multimeter","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/multimeter/keysight_common.jl\"]","category":"page"},{"location":"instrument_functions/#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{<:KeysightMultimeter}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_channel","text":"get_channel(obj::Instr{<:KeysightMultimeter})\n\nIndicates which input terminals are selected on the front panel Front/Rear switch. This switch is not programmable; this query reports the position of the switch, but cannot change it.\n\nDo not toggle the Front/Rear switch with active signals on the terminals. This switch is not intended to be used in this way and may be damaged by high voltages or currents, possibly compromising the instrument's safety features.\n\nReturns\n\n\"FRON\" or \"REAR\"\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_current-Tuple{TcpInstruments.Instr{<:KeysightMultimeter}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_current","text":"get_current(obj::Instr{<:KeysightMultimeter}; type=\"DC\")\n\nReturns current\n\nKeywords\n\ntype: \"DC\" | \"AC\" (Default DC)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_resistance-Tuple{TcpInstruments.Instr{<:KeysightMultimeter}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_resistance","text":"get_resistance(multimeter; wire=2)\nget_resistance(multimeter; wire=4)\n\nReturns resistance\n\nKeywords\n\nwire: 2 | 4 (Required)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_tc_temperature-Tuple{TcpInstruments.Instr{<:KeysightMultimeter}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_tc_temperature","text":"get_tc_temperature(multimeter)\n\nPerform take a measurement with the probe mode set to thermocouple\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_temp_unit-Tuple{TcpInstruments.Instr{<:KeysightMultimeter}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_temp_unit","text":"get_temp_unit(multimeter)\n\nReturns C, F or K depending on the set temperature unit\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{<:KeysightMultimeter}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_voltage","text":"Returns voltage\n\nKeywords\n\ntype: \"DC\" | \"AC\" (Default DC)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_tc_type-Tuple{TcpInstruments.Instr{<:KeysightMultimeter}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_tc_type","text":"set_tc_type(multimeter; type=\"K\")\n\nKeywords\n\ntype: Can be E, J, K, N, R, T (Defaults to K)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_temp_unit_celsius-Tuple{TcpInstruments.Instr{<:KeysightMultimeter}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_temp_unit_celsius","text":"set_temp_unit_celsius(multimeter)\n\nSets the temperature unit to celcius\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_temp_unit_farenheit-Tuple{TcpInstruments.Instr{<:KeysightMultimeter}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_temp_unit_farenheit","text":"set_temp_unit_farenheit(multimeter)\n\nSets the temperature unit to farenheit\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_temp_unit_kelvin-Tuple{TcpInstruments.Instr{<:KeysightMultimeter}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_temp_unit_kelvin","text":"set_temp_unit_kelvin(multimeter)\n\nSets the temperature unit to kelvin\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#Oscilloscope","page":"Instrument-specific Functions","title":"Oscilloscope","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: Oscilloscope && t != Oscilloscope","category":"page"},{"location":"instrument_functions/#TcpInstruments.AgilentDSOX4024A","page":"Instrument-specific Functions","title":"TcpInstruments.AgilentDSOX4024A","text":"struct AgilentDSOX4024A <: AgilentScope\n\nSupported functions\n\ninitialize\nterminate\n\nrun\nstop\nget_data\nget_waveform_info\n\nget_impedance\nset_impedance_1Mohm\nset_impedance_50ohm\nget_lpf_state\nlpf_on\nlpf_off\nget_coupling\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.AgilentDSOX4034A","page":"Instrument-specific Functions","title":"TcpInstruments.AgilentDSOX4034A","text":"Supported functions\n\ninitialize\nterminate\n\nrun\nstop\nget_data\nget_waveform_info\n\nget_impedance\nset_impedance_1Mohm\nset_impedance_50ohm\nget_lpf_state\nlpf_on\nlpf_off\nget_coupling\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.AgilentScope","page":"Instrument-specific Functions","title":"TcpInstruments.AgilentScope","text":"Supported models\n\nAgilentDSOX4024A\nAgilentDSOX4034A\n\nSupported functions\n\ninitialize\nterminate\n\nrun\nstop\nget_data\nget_waveform_info\n\nget_impedance\nset_impedance_1Mohm\nset_impedance_50ohm\nget_lpf_state\nlpf_on\nlpf_off\nget_coupling\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#Agilent-Oscilloscope","page":"Instrument-specific Functions","title":"Agilent Oscilloscope","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/oscilloscope/agilent_common.jl\"]","category":"page"},{"location":"instrument_functions/#TcpInstruments.get_coupling-Tuple{TcpInstruments.Instr{<:AgilentScope}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_coupling","text":"get_coupling(scope; chan=1)\n\nreturns \"AC\" or \"DC\"\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_data-Tuple{TcpInstruments.Instr{<:AgilentScope}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_data","text":"get_data(\n    instr::TcpInstruments.Instr{<:AgilentScope}\n) -> Vector\n\n\nGrab data from the specified channel(s). If no channels are specified, data will be grabbed from all available channels\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_impedance-Tuple{TcpInstruments.Instr{<:AgilentScope}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_impedance","text":"get_impedance(scope)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nReturns\n\n\"FIFT\": 50Ω\n\"ONEM\": 1MΩ\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_lpf_state-Tuple{TcpInstruments.Instr{<:AgilentScope}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_lpf_state","text":"get_lpf_state(\n    instr::TcpInstruments.Instr{<:AgilentScope};\n    chan\n) -> Any\n\n\nSee state the internal low-pass filter:\n\nreturns \"0\" or \"1\"\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_waveform_info-Tuple{TcpInstruments.Instr{<:AgilentScope}, Integer}","page":"Instrument-specific Functions","title":"TcpInstruments.get_waveform_info","text":"get_waveform_info(\n    instr::TcpInstruments.Instr{<:AgilentScope},\n    ch::Integer\n) -> TcpInstruments.ScopeInfo\n\n\nGrab channel information and return it in a ScopeInfo(@ref) struct\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.lpf_off-Tuple{TcpInstruments.Instr{<:AgilentScope}}","page":"Instrument-specific Functions","title":"TcpInstruments.lpf_off","text":"lpf_off(instr::TcpInstruments.Instr{<:AgilentScope}; chan)\n\n\nTurn off an internal low-pass filter.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.lpf_on-Tuple{TcpInstruments.Instr{<:AgilentScope}}","page":"Instrument-specific Functions","title":"TcpInstruments.lpf_on","text":"lpf_on(instr::TcpInstruments.Instr{<:AgilentScope}; chan)\n\n\nTurn on an internal low-pass filter. When the filter is on, the bandwidth of the specified channel is limited to approximately 25 MHz.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.run-Tuple{TcpInstruments.Instr{<:AgilentScope}}","page":"Instrument-specific Functions","title":"TcpInstruments.run","text":"run(scope)\n\nRun Oscilloscope\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_impedance_1Mohm-Tuple{TcpInstruments.Instr{<:AgilentScope}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_impedance_1Mohm","text":"set_impedance_1Mohm(scope; chan=1)\n\nSet impedance to 1MΩ\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_impedance_50ohm-Tuple{TcpInstruments.Instr{<:AgilentScope}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_impedance_50ohm","text":"set_impedance_50ohm(scope; chan=1)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nSet impedance to 50Ω\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_waveform_points_mode-Tuple{TcpInstruments.Instr{<:AgilentScope}, Symbol}","page":"Instrument-specific Functions","title":"TcpInstruments.set_waveform_points_mode","text":"set_waveform_points_mode(scope, mode)\n\nSet which data to transfer when using get_data(@ref)\n\nInputs: scope: handle to the connected oscilloscope mode:\n\n:NORMAL: transfer the measurement data\n:RAW: transfer the raw acquisition data\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.stop-Tuple{TcpInstruments.Instr{<:AgilentScope}}","page":"Instrument-specific Functions","title":"TcpInstruments.stop","text":"stop(scope)\n\nStop Oscilloscope\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#Power-Supply","page":"Instrument-specific Functions","title":"Power Supply","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: PowerSupply && t != PowerSupply","category":"page"},{"location":"instrument_functions/#TcpInstruments.AgilentE36312A","page":"Instrument-specific Functions","title":"TcpInstruments.AgilentE36312A","text":"Supported functions\n\ninitialize\nterminate\n\nget_output_status\nenable_output\ndisable_output\nget_channel\nset_channel\nget_voltage\nset_voltage\nget_current_limit\nset_current_limit\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.AgilentPowerSupply","page":"Instrument-specific Functions","title":"TcpInstruments.AgilentPowerSupply","text":"Supported models\n\nAgilentE36312A\n\nSupported functions\n\ninitialize\nterminate\n\nget_output_status\nenable_output\ndisable_output\nget_channel\nset_channel\nget_voltage\nset_voltage\nget_current_limit\nset_current_limit\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.SRSPS310","page":"Instrument-specific Functions","title":"TcpInstruments.SRSPS310","text":"Supported functions\n\ninitialize\nterminate\n\nget_output_status\nenable_output\ndisable_output\nget_voltage\nset_voltage\nget_voltage_limit\nset_voltage_limit\nget_current_limit\nset_current_limit\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.SRSPowerSupply","page":"Instrument-specific Functions","title":"TcpInstruments.SRSPowerSupply","text":"Supported models\n\nSRSPS310 (GPIB enabled device. Requires an attached Prologix Controller to work)\n\nSupported functions\n\ninitialize\nterminate\n\nget_output_status\nenable_output\ndisable_output\nget_voltage\nset_voltage\nget_voltage_limit\nset_voltage_limit\nget_current_limit\nset_current_limit\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.Versatile10010XRLXI","page":"Instrument-specific Functions","title":"TcpInstruments.Versatile10010XRLXI","text":"Supported functions\n\ninitialize\nterminate\n\nget_output_status\nenable_output\ndisable_output\nget_voltage\nset_voltage\nget_current_limit\nset_current_limit\n\nremote_mode (automatically called by initialize)\nlocal_mode (automatically called by terminate)\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.Versatile2005XRLXI","page":"Instrument-specific Functions","title":"TcpInstruments.Versatile2005XRLXI","text":"Supported functions\n\ninitialize\nterminate\n\nget_output_status\nenable_output\ndisable_output\nget_voltage\nset_voltage\nget_current_limit\nset_current_limit\n\nremote_mode (automatically called by initialize)\nlocal_mode (automatically called by terminate)\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.VersatilePowerSupply","page":"Instrument-specific Functions","title":"TcpInstruments.VersatilePowerSupply","text":"Supported models\n\nVersatile2005XRLXI (single channel)\nVersatile10010XRLXI (single channel)\n\nSupported functions\n\ninitialize\nterminate\n\nget_output_status\nenable_output\ndisable_output\nget_voltage\nset_voltage\nget_current_limit\nset_current_limit\n\nremote_mode (automatically called by initialize)\nlocal_mode (automatically called by terminate)\n\nThis instrument has a remote mode and a local mode. Some commands do not work while the device is in local mode, therefore remote_mode  is called automatically upon initialization. By default, the device is  always in remote mode.\n\nThese functions should not be directly needed but if for some reason you need to switch modes while using the device you can use local_mode to turn the device back to local mode.\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#Agilent-Power-Supply","page":"Instrument-specific Functions","title":"Agilent Power Supply","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/power_supply/agilent_common.jl\"]","category":"page"},{"location":"instrument_functions/#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{<:AgilentPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.disable_output","text":"disable_output(obj::Instr{<:AgilentPowerSupply})\n\nThis will disable an output on a device.\n\nIf the device has multiple channels it will disable the device for the currently selected channel. To see the channel that will effected use the get_channel function.\n\nIf you want to disable a different channel, first use set_channel to choose the channel. Running this function subsequently will disable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{<:AgilentPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.enable_output","text":"enable_output(obj::Instr{<:AgilentPowerSupply})\n\nThis will enable an output on a device.\n\nIf the device has multiple channels it will enable the device for the currently selected channel. To see the channel that will effected use the get_channel function.\n\nIf you want to enable a different channel, first use set_channel to choose the channel. Running this function subsequently will enable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_channel-Tuple{TcpInstruments.Instr{<:AgilentPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_channel","text":"get_channel(obj::Instr{<:AgilentPowerSupply}; v=false)\n\nThis will return the global or default channel of a device.\n\nAllows you to see what the global channel is set to at the moment\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\nv\noptional boolean flag argument that is set to false\nsetting to true will print the verbose channel name\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String     - {\"1\"|\"2\"|...}     - when v == true: \"P6V\", .. etc\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{<:AgilentPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_current_limit","text":"get_current_limit(obj::Instr{<:AgilentPowerSupply}; chan=0)\n\nThis will return the current limit of a device.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Current Limit\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_output_status-Tuple{TcpInstruments.Instr{<:AgilentPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_output_status","text":"get_output_status(obj::Instr{<:AgilentPowerSupply})\n\nThis will return the state of an output on a device.\n\nIf the device has multiple channels is will display the state of the currently selected channel. To see the channel that will read use the get_channel function.\n\nIf you want to see the state of a different channel, first use set_channel to choose the channel. Running this function subsequently will disable that channel\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String: {\"OFF\"|\"ON\"}\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{<:AgilentPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_voltage","text":"get_voltage(obj::Instr{<:AgilentPowerSupply}; chan=0)\n\nThis will return the voltage of a device's channel.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_channel-Tuple{TcpInstruments.Instr{<:AgilentPowerSupply}, Any}","page":"Instrument-specific Functions","title":"TcpInstruments.set_channel","text":"set_channel(obj::Instr{<:AgilentPowerSupply}, chan)\n\nThis will set the global channel on a device.\n\nAny commands like set_voltage that affect the device with respect to a specific channel will be impacted by this command.\n\nBy setting the channel on a device, all subsequent commands will operate on that channel unless they allow for an optional channel argument.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nchan\nThis can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{<:AgilentPowerSupply}, Union{Unitful.Quantity{T, 𝐈, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐈, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_current_limit","text":"set_current_limit(obj::Instr{<:AgilentPowerSupply}, num::Current; chan=0)\n\nThis will change the current limit of a device on a given channel\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nnum\nDesired current limit of type Unitful Amps: 1.0u\"A\"\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{<:AgilentPowerSupply}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_voltage","text":"set_voltage(obj::Instr{<:AgilentPowerSupply}, num::Voltage; chan=0)\n\nThis will change the voltage output voltage of a device.\n\nParameters:\n\nobj\nmust be a Power Supply Instrument\nnum\ninteger or decimal of the desired voltage\nchan\nThis is an optional parameter\nIf not provided it will use the default channel (see set_channel)\nOtherwise this can be a string or int: 1, 2, 3 .. to n\nwhere n is the total number of channels\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#SRS-Power-Supply","page":"Instrument-specific Functions","title":"SRS Power Supply","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"This device needs a gpib adapter","category":"page"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"As of right now the prologix adapter interface is the only supported adapter.","category":"page"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Connect your power supply to a prologix adapter then initialize using the GPIB_ID keyword argument.","category":"page"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"If you do not know the GPIB Channel ID you can initialize your device without that flag. Then run scan_prologix on your device. This will tell you what channel is connected then manually you can use the set_prologix function to set the channel.","category":"page"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/power_supply/srs_common.jl\"]","category":"page"},{"location":"instrument_functions/#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{<:SRSPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.disable_output","text":"disable_output(obj::Instr{<:SRSPowerSupply})\n\nThis will disable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{<:SRSPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.enable_output","text":"enable_output(obj::Instr{<:SRSPowerSupply})\n\nThis will enable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{<:SRSPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_current_limit","text":"get_current_limit(obj::Instr{<:SRSPowerSupply})\n\nThis will return the current limit of a device.\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Current Limit\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_output_status-Tuple{TcpInstruments.Instr{<:SRSPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_output_status","text":"get_output_status(obj::Instr{<:SRSPowerSupply})\n\nThis will get and return whether the output from SRSPS310 is enabled.\n\nArguments:     - obj     - must be a Power Supply Instrument Supported Instruments:     - Power supply\n\nReturns\n\n\"ON\" if High Voltage Output is On\n\"OFF\" if High Voltage Output is Off\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{<:SRSPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_voltage","text":"get_voltage(obj::Instr{<:SRSPowerSupply})\n\nThis will return the voltage of a device\n\nVoltage Limit: 1250V\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_voltage_limit-Tuple{TcpInstruments.Instr{<:SRSPowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_voltage_limit","text":"get_voltage_limit(obj::Instr{<:SRSPowerSupply})\n\nThis will return the voltage limit of a device\n\nVoltage Limit: 1250V\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{<:SRSPowerSupply}, Union{Unitful.Quantity{T, 𝐈, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐈, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_current_limit","text":"set_current_limit(obj::Instr{<:SRSPowerSupply}, num::Current)\n\nThis will change the current limit of a device\n\nMIN Value: 0 Max Value: { 2.1e-3 | 0.021 } (21mA)\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{<:SRSPowerSupply}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_voltage","text":"set_voltage(obj::Instr{<:SRSPowerSupply}, volt::Voltage; [delta_volt::Voltage, delta_time::Time, verbose::Bool])\n\nSets the output voltage output of a SRSPS310 power supply. optional parameters: deltavolt and deltatime can be used to set the ramping speed when setting a new voltage.\n\ndelta_volt sets the maximum of each voltage step.  (std value: Inf *u\"V\")\ndelta_time sets the minimum time between each voltage update. (std value: 100u\"ms\")\nverbose when true prints info on ramping speed and steps (std value: false)\n\nUnits are handled by the package Unitful.\n\nCurrently set voltage limits can read using get_voltage_limit().\n\nExamples:\n\njulia> psu_h = initialize(SRSPS310)\njulia> set_voltage(psu_h, 11.1u\"V\")\njulia> set_voltage(psu_h, 1100\"mV\")\njulia> set_voltage(psu_h, 100\"V\", delta_volt = 2u\"V\", delta_time=100u\"ms\", verbose=true)\n\nReturns: Nothing\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_voltage_limit-Tuple{TcpInstruments.Instr{<:SRSPowerSupply}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_voltage_limit","text":"set_voltage_limit(::SRSPS310, voltage_limit)\n\nThis will change the voltage limit of a device.\n\nMax Voltage Limit: 1250V\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#Versatile-Power-Supply","page":"Instrument-specific Functions","title":"Versatile Power Supply","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/power_supply/versatile_common.jl\"]","category":"page"},{"location":"instrument_functions/#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{<:VersatilePowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.disable_output","text":"disable_output(obj::Instr{<:VersatilePowerSupply})\n\nThis will disable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{<:VersatilePowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.enable_output","text":"enable_output(obj::Instr{<:VersatilePowerSupply})\n\nThis will enable an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_current_limit-Tuple{TcpInstruments.Instr{<:VersatilePowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_current_limit","text":"get_current_limit(obj::Instr{<:VersatilePowerSupply})\n\nThis will return the current limit of a device.\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Current Limit\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_output_status-Tuple{TcpInstruments.Instr{<:VersatilePowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_output_status","text":"get_output_status(obj::Instr{<:VersatilePowerSupply})\n\nThis will return the state of an output on a device.\n\nArguments:\n\nobj\nmust be a Power Supply Instrument\n\nSupported Instruments:\n\nPower supply\n\nReturns:   String: {\"OFF\"|\"ON\"}\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_voltage-Tuple{TcpInstruments.Instr{<:VersatilePowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_voltage","text":"get_voltage(obj::Instr{<:VersatilePowerSupply})\n\nThis will return the voltage of a device\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Voltage\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.local_mode-Tuple{TcpInstruments.Instr{<:VersatilePowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.local_mode","text":"local_mode(obj::Instr{<:VersatilePowerSupply})\n\nSet device to remote mode\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.remote_mode-Tuple{TcpInstruments.Instr{<:VersatilePowerSupply}}","page":"Instrument-specific Functions","title":"TcpInstruments.remote_mode","text":"remote_mode(obj::Instr{<:VersatilePowerSupply})\n\nSet device to remote mode\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_current_limit-Tuple{TcpInstruments.Instr{<:VersatilePowerSupply}, Union{Unitful.Quantity{T, 𝐈, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐈, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_current_limit","text":"set_current_limit(obj::Instr{<:VersatilePowerSupply}, num::Current)\n\nThis will change the current limit of a device\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_voltage-Tuple{TcpInstruments.Instr{<:VersatilePowerSupply}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_voltage","text":"set_voltage(obj::Instr{<:VersatilePowerSupply}, num::Voltage)\n\nThis will change the voltage output of a device.\n\nSupported Instruments:\n\nPower supply\n\nReturns:   Nothing\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#Waveform-Generator","page":"Instrument-specific Functions","title":"Waveform Generator","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: WaveformGenerator && t != WaveformGenerator","category":"page"},{"location":"instrument_functions/#TcpInstruments.Keysight33612A","page":"Instrument-specific Functions","title":"TcpInstruments.Keysight33612A","text":"Supported functions\n\ninitialize\nterminate\n\nget_output_status\nset_output_on\nset_output_off\nget_frequency\nset_frequency\nget_amplitude\nset_amplitude\nget_voltage_offset\nset_voltage_offset\n\nget_function\nset_function\n\nget_mode\nset_mode_cw\nset_mode_burst\nget_burst_mode\nset_burst_mode_trigger\nset_burst_mode_gated\nget_burst_num_cycles\nset_burst_num_cycles\nget_burst_period\nset_burst_period\n\nNot yet implemented\n\nget_time_offset\nset_time_offset\n\nExample for creating a sin wave:\n\nwg = initialize(Keysight33612A, [ip_address])\nset_mode_cw(wg)\nset_function(wg, \"SIN\")\nset_frequency(wg, 1u\"kHz\")\nset_amplitude(wg, 0.1u\"V\")\nset_voltage_offset(wg, 0u\"V\")\nset_output_on(wg)\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#TcpInstruments.KeysightWaveGen","page":"Instrument-specific Functions","title":"TcpInstruments.KeysightWaveGen","text":"Supported functions\n\ninitialize\nterminate\n\nget_output_status\nset_output_on\nset_output_off\nget_frequency\nset_frequency\nget_amplitude\nset_amplitude\nget_voltage_offset\nset_voltage_offset\n\nget_function\nset_function\n\nget_mode\nset_mode_cw\nset_mode_burst\nget_burst_mode\nset_burst_mode_trigger\nset_burst_mode_gated\nget_burst_num_cycles\nset_burst_num_cycles\nget_burst_period\nset_burst_period\n\nNot yet implemented\n\nget_time_offset\nset_time_offset\n\nExample for creating a sin wave:\n\nwg = initialize(Keysight33612A, [ip_address])\nset_mode_cw(wg)\nset_function(wg, \"SIN\")\nset_frequency(wg, 1u\"kHz\")\nset_amplitude(wg, 0.1u\"V\")\nset_voltage_offset(wg, 0u\"V\")\nset_output_on(wg)\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#Keysight-Waveform-Generator","page":"Instrument-specific Functions","title":"Keysight Waveform Generator","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/waveform_generator/keysight_common.jl\"]","category":"page"},{"location":"instrument_functions/#TcpInstruments.get_amplitude-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_amplitude","text":"get_amplitude(wave_gen; chan=1)\n\nReturns the peak to peak voltage for the channel [Vpp]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_burst_mode-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_burst_mode","text":"get_burst_mode(instr)\nget_burst_mode(instr; chan=1)\n\nReturns the burst mode of a device:     \"TRIG\" ~ If the device is in Triggered Mode     \"GAT\" ~ If the device is in Gated Mode\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_burst_num_cycles-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_burst_num_cycles","text":"get_burst_num_cycles(instr)\nget_burst_num_cycles(instr; chan=2)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nReturns\n\nFloat64: number of cycles burst mode is set to\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_burst_period-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_burst_period","text":"get_burst_period(instr; chan=1)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nReturns\n\nFloat64: time between bursts [s]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_frequency-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_frequency","text":"get_frequency(wave_gen; chan=1)\n\nReturns the signal frequency for the channel [Hz]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_function-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_function","text":"get_function(instr)\nget_function(instr; chan=2)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nReturns\n\nString: Will return one of these shortened forms:\n\n{SINusoid|SQUare|TRIangle|RAMP|PULSe|PRBS|NOISe|ARB|DC}\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_mode-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_mode","text":"get_mode(instr)\nget_mode(instr; chan=1)\n\nKeywords\n\nchan: Specify channel: Default is 1\n\nReturns:     \"CW\" ~ if device is in continous wavefrom mode     \"BURST\" ~ if device is in BURST mode\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_output_status-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_output_status","text":"get_output_status(wave_gen; chan=1)\n\nGet the status of the front panel output connector\n\nReturns \"ON\" or \"OFF\"\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_voltage_offset-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_voltage_offset","text":"get_voltage_offset(wave_gen; chan=1)\n\nReturns the voltage offset for the channel [V]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_amplitude-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_amplitude","text":"set_amplitude(wave_gen; chan=1)\n\nSet the peak to peak voltage for the channel [Vpp]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_burst_mode_gated-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_burst_mode_gated","text":"set_burst_mode_gated(wave_gen; chan=1)\n\nSet the burst mode of a device to Gated Mode\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_burst_mode_trigger-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_burst_mode_trigger","text":"set_burst_mode_trigger(wave_gen; chan=1)\n\nSet the burst mode of a device to Triggered Mode\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_burst_num_cycles-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}, Any}","page":"Instrument-specific Functions","title":"TcpInstruments.set_burst_num_cycles","text":"set_burst_num_cycles(instr, cycles)\nset_burst_num_cycles(instr, cycles; chan=2)\n\nSets the number of cycles for burst mode\n\nArguments\n\ncycles\n\nKeywords\n\nchan: Specify channel: Default is 1\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_burst_period-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}, Any}","page":"Instrument-specific Functions","title":"TcpInstruments.set_burst_period","text":"set_burst_period(obj, duration; chan=1)\n\nArguments\n\nduration: The number of seconds (This value can also be \"MIN\" or \"MAX\")\n\nKeywords\n\nchan: Specify channel: Default is 1\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_frequency-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}, Union{Unitful.Quantity{T, 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐓^-1, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_frequency","text":"set_frequency(wave_gen; chan=1)\n\nSet the signal frequency for the channel [Hz]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_function-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}, Any}","page":"Instrument-specific Functions","title":"TcpInstruments.set_function","text":"set_function(instr, func; chan=1)\n\nArguments\n\nfunc::String: Acceptable inputs:\n\n{SINusoid|SQUare|TRIangle|RAMP|PULSe|PRBS|NOISe|ARB|DC}\n\nKeywords\n\nchan: Specify channel: Default is 1\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_mode_burst-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_mode_burst","text":"    set_mode_burst(instr)\n\nChanges Waveform Generator mode from continous waveform to burst\n\nBy default it sets the type of burst mode to triggered mode. Gated mode can also be set by using the optional flag:\n\n    set_mode_burst(instr; mode=:gated)\n\nThe optional trig_src flag sets the trigger source for burst triggered mode. Right now the default is Timer. To implement more trigger sources see page 130 of the manual for 33612A\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_mode_cw-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_mode_cw","text":"set_mode_cw(instr)\nset_mode_cw(instr; chan=1)\n\nPuts the device in continuous waveform/turns off burst mode\n\nKeywords\n\nchan: Specify channel: Default is 1\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_output_off-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_output_off","text":"set_output_off(wave_gen; chan=1)\n\nDeactivate the front panel output connector\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_output_on-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_output_on","text":"set_output_on(wave_gen; chan=1)\n\nActivate the front panel output connector\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_voltage_offset-Tuple{TcpInstruments.Instr{<:KeysightWaveGen}, Union{Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐌 𝐈^-1 𝐓^-3, U}} where {L, S}} where {T, U}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_voltage_offset","text":"set_voltage_offset(wave_gen; chan=1)\n\nSet the voltage offset for the channel [V]\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#SourceMeasureUnit","page":"Instrument-specific Functions","title":"SourceMeasureUnit","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) === DataType && t <: SourceMeasureUnit && t != SourceMeasureUnit","category":"page"},{"location":"instrument_functions/#TcpInstruments.AgilentB2910BL","page":"Instrument-specific Functions","title":"TcpInstruments.AgilentB2910BL","text":"Supported functions\n\ninitialize\nterminate\nenable_output\ndisable_output\nset_source\nget_source\nset_source_mode\nget_source_mode\nset_measurement_mode\nspot_measurement\nset_measurement_range\nset_measurement_duration\nset_voltage_output\nset_voltage_limit\nset_voltage_sweep_parameters\nset_current_output\nset_current_limit\nset_current_sweep_parameters\nstart_measurement\nget_measurement\n\n\n\n\n\n","category":"type"},{"location":"instrument_functions/#Agilent-SourceMeasureUnit","page":"Instrument-specific Functions","title":"Agilent SourceMeasureUnit","text":"","category":"section"},{"location":"instrument_functions/","page":"Instrument-specific Functions","title":"Instrument-specific Functions","text":"Modules = [TcpInstruments]\nFilter = t -> typeof(t) !== DataType\nPages = [\"src/source_measure_unit/agilent_common.jl\"]","category":"page"},{"location":"instrument_functions/#TcpInstruments.disable_autorange-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.disable_autorange","text":"disable_autorange(obj::Instr{<:AgilentSourceMeasureUnit}; source=\"voltage\", channel::Integer=1)\n\nThis will disable an output channel's automatic ranging. If automatic ranging disabled, the source output \nis performed using the range set [SOURce]:<CURRent|VOLTage>:RANGe command.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.disable_output-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.disable_output","text":"disable_output(obj::Instr{<:AgilentSourceMeasureUnit}; channel::Integer=1)\n\nThis will disable an output channel of a device.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.enable_autorange-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.enable_autorange","text":"enable_autorange(obj::Instr{<:AgilentSourceMeasureUnit}; source=\"voltage\", channel::Integer=1)\n\nThis will enable an output channel's automatic ranging.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.enable_output-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.enable_output","text":"enable_output(obj::Instr{<:AgilentSourceMeasureUnit}; channel::Integer=1)\n\nThis will enable an output channel of a device.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_measurement-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_measurement","text":"get_measurement(obj::Instr{<:AgilentSourceMeasureUnit}; channel::Integer=1)\n\nGet measurement stored by start_measurement(). \nReturns voltage, current, resistance, and time.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_source-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_source","text":"get_source_mode(obj::Instr{<:AgilentSourceMeasureUnit}; channel::Integer=1)\n\nThis will get the selected channel's source output mode.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.get_source_mode-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.get_source_mode","text":"get_source_mode(obj::Instr{<:AgilentSourceMeasureUnit}; source::String=\"voltage\", channel::Integer=1)\n\nThis will get a source channel mode.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_current_limit","page":"Instrument-specific Functions","title":"TcpInstruments.set_current_limit","text":"set_current_limit(obj::Instr{<:AgilentSourceMeasureUnit}, current=\"default\"; channel::Integer=1)\n\nThis will set the selected channel's output current limit. The limit is applied to both positive and negative current.\n\n\n\n\n\n","category":"function"},{"location":"instrument_functions/#TcpInstruments.set_current_output","page":"Instrument-specific Functions","title":"TcpInstruments.set_current_output","text":"set_current_output(obj::Instr{<:AgilentSourceMeasureUnit}, current=\"default\"; channel::Integer=1)\n\nThis will set the selected channel's output current.\n\n\n\n\n\n","category":"function"},{"location":"instrument_functions/#TcpInstruments.set_current_sweep_parameters-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_current_sweep_parameters","text":"set_current_sweep_parameters(obj::Instr{<:AgilentSourceMeasureUnit}; \nstart=\"default\", \nstop=\"default\", \nstep=\"default\", \nchannel::Integer=1)\n\nThis will set a channel's current source start, stop, step, and trigger point value for sweep output. \npoints = span/step + 1 (where step is not 0)\nspan = stop - start\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_measurement_duration-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_measurement_duration","text":"set_measurement_duration(obj::Instr{<:AgilentSourceMeasureUnit}; aperture=\"default\", channel::Integer=1)\n\nThis will set an output channel's integration time for one point measurement. \nMeasurement type is not important since time value is common for voltage, current, and resistance.\nIf value set is less than MIN or greater than MAX, time is automatically set to MIN or MAX.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_measurement_mode-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_measurement_mode","text":"set_measurement_mode(obj::Instr{<:AgilentSourceMeasureUnit};\nchan= 1, current=false, voltage=false, resistance=false\n)\n\nThis will enable the selected channel's specified measurement functions.\nEnabling resistance will enable voltage and current measurement modes as well.\n\nParameters:\n- voltage\n    - true | false (Default)\n- current\n    - true | false (Default)\n- resistance\n    - true | false (Default)\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_measurement_range-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}, Any}","page":"Instrument-specific Functions","title":"TcpInstruments.set_measurement_range","text":"set_measurement_range(obj::Instr{<:AgilentSourceMeasureUnit}, range; channel::Integer=1)\n\nThis will set an output channel's measurement range.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_measurement_range-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_measurement_range","text":"set_measurement_range(obj::Instr{<:AgilentSourceMeasureUnit}; measurement::String=\"voltage\", range=\"default\", channel::Integer=1)\n\nThis will set an output channel's measurement range.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_source-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_source","text":"set_source(obj::Instr{<:AgilentSourceMeasureUnit}; source=\"voltage\", channel::Integer=1)\n\nThis will set the selected channel's source output mode.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_source_mode-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_source_mode","text":"set_source_mode(obj::Instr{<:AgilentSourceMeasureUnit}; source::String=\"voltage\", mode=\"fixed\", channel::Integer=1)\n\nThis will set a source channel mode.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.set_voltage_limit","page":"Instrument-specific Functions","title":"TcpInstruments.set_voltage_limit","text":"set_voltage_limit(obj::Instr{<:AgilentSourceMeasureUnit}, voltage=\"default\"; channel::Integer=1)\n\nThis will set the selected channel's output current limit. The limit is applied to both positive and negative voltage.\n\n\n\n\n\n","category":"function"},{"location":"instrument_functions/#TcpInstruments.set_voltage_output","page":"Instrument-specific Functions","title":"TcpInstruments.set_voltage_output","text":"set_voltage_output(obj::Instr{<:AgilentSourceMeasureUnit}, voltage=\"default\"; channel::Integer=1)\n\nThis will set the selected channel's output voltage.\n\n\n\n\n\n","category":"function"},{"location":"instrument_functions/#TcpInstruments.set_voltage_sweep_parameters-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.set_voltage_sweep_parameters","text":"set_voltage_sweep_parameters(obj::Instr{<:AgilentSourceMeasureUnit}; \nstart=\"default\", \nstop=\"default\", \nstep=\"default\", \nchannel::Integer=1)\n\nThis will set a channel's voltage source start, stop, step, and trigger point value for sweep output. \npoints = span/step + 1 (where step is not 0)\nspan = stop - start\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.spot_measurement-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}, String}","page":"Instrument-specific Functions","title":"TcpInstruments.spot_measurement","text":"spot_measurement(obj::Instr{<:AgilentSourceMeasureUnit}, measurement::String=\"voltage\"; channel::Integer=1)\n\nExecutes a spot (one-shot) measurement and returns the measurement result data.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.spot_measurement-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.spot_measurement","text":"spot_measurement(obj::Instr{<:AgilentSourceMeasureUnit}; channel::Integer=1)\n\nExecutes a spot (one-shot) measurement and returns valid voltage, current, and resistance if type is not specified.\n\n\n\n\n\n","category":"method"},{"location":"instrument_functions/#TcpInstruments.start_measurement-Tuple{TcpInstruments.Instr{<:AgilentSourceMeasureUnit}}","page":"Instrument-specific Functions","title":"TcpInstruments.start_measurement","text":"start_measurement(obj::Instr{<:AgilentSourceMeasureUnit}; channel::Integer=1)\n\nInitiates the specified device action for the specified channel. Trigger status is changed from idle to initiated.\nAdjust voltage and current limit if necessary.\n\n\n\n\n\n","category":"method"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"CurrentModule = TcpInstruments","category":"page"},{"location":"instruments/#Supported-Instruments","page":"Supported Instruments","title":"Supported Instruments","text":"","category":"section"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"A list of all currently supported instruments:","category":"page"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"ImpedanceAnalyzer\nMultimeter\nOscilloscope\nPowerSupply\nWaveformGenerator","category":"page"},{"location":"instruments/","page":"Supported Instruments","title":"Supported Instruments","text":"ImpedanceAnalyzer\nMultimeter\nOscilloscope\nPowerSupply\nWaveformGenerator","category":"page"},{"location":"instruments/#TcpInstruments.ImpedanceAnalyzer","page":"Supported Instruments","title":"TcpInstruments.ImpedanceAnalyzer","text":"Supported Instruments: ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\n\nAgilent4294A\nAgilent4395A\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.Multimeter","page":"Supported Instruments","title":"TcpInstruments.Multimeter","text":"Supported Instruments: ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\n\nKeysightDMM34465A\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.Oscilloscope","page":"Supported Instruments","title":"TcpInstruments.Oscilloscope","text":"Supported Instruments: ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\n\nAgilentDSOX4024A\nAgilentDSOX4034A\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.PowerSupply","page":"Supported Instruments","title":"TcpInstruments.PowerSupply","text":"Supported Instruments: ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\n\nAgilentE36312A\nSRSPS310\nVersatile2005XRLXI\nVersatile10010XRLXI\n\n\n\n\n\n","category":"type"},{"location":"instruments/#TcpInstruments.WaveformGenerator","page":"Supported Instruments","title":"TcpInstruments.WaveformGenerator","text":"Supported Instruments: ≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\n\nKeysight33612A\n\n\n\n\n\n","category":"type"},{"location":"#TcpInstruments.jl","page":"Home","title":"TcpInstruments.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TcpInstruments allows you to control a variety of internet-enabled instruments","category":"page"},{"location":"","page":"Home","title":"Home","text":"SCPI is supported on almost all modern pieces of lab equipment and this code has during development been tested on the following devices:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Oscilloscope Keysight DSOX4034A\nOscilloscope Keysight DSOX4024A\nMultimeter Keysight DMM34465A\nSignal generator Keysight 33612A\nPower supply Agilent E36312A\nHV power supply SRS PS310 via Prologix GPIB to Ethernet adaptor\nPower supply Versatile Power 100-10 XR\nImpedance analyzer Agilent 4294A\nSourceMeasureUnit Agilent B2910BL","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TcpInstruments can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add TcpInstruments","category":"page"},{"location":"","page":"Home","title":"Home","text":"To see the different types of devices you can interface with, run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ?\nhelp?> Instrument","category":"page"},{"location":"","page":"Home","title":"Home","text":"Autoinitialize - Storage of name-aliases and IP addresses.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can create a ~/.tcp_instruments.yml file which stores the IP-address  and an optional name-alias for all your devices in one easy-to-find place so they don't have to be hardcoded in scripts.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To create an example config file that can be edited to your needs run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"create_config()","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will create a yaml file in your home directory: ~/.tcp_instruments.yml","category":"page"},{"location":"","page":"Home","title":"Home","text":"This yaml file will be loaded everytime you use this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also create a project-specific config by creating the config in your project root directory instead of your home directory. You can do this with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"create_config(pwd())","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once you have created a config file you can change it with","category":"page"},{"location":"","page":"Home","title":"Home","text":"edit_config()","category":"page"},{"location":"","page":"Home","title":"Home","text":"Format of .tcp_instruments.yml file:","category":"page"},{"location":"","page":"Home","title":"Home","text":"{name-of-device}:\n    address: \"{ip-address}\"\n\n# GPIB Device connected with a prologix controller\n{name-of-device}:\n    gpib: {channel-number}\n    address: \"{ip-address}\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's create a new .tcp_instruments.yml file or ensure the two previous devices are found in our .tcp_instruments.yml file","category":"page"},{"location":"","page":"Home","title":"Home","text":"Keysight33612A:\n    address: \"10.1.30.36\"\n    alias: \"OleBigSG\"\nSRSPS310:\n    gpib: 2\n    address: \"10.1.30.37:1234\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Recompile the new config which is located in the current working directory","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> activate .\njulia> using TcpInstruments","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each TcpInstruments will first look for a config in the current directory and if none is found it will look in the home directory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The two devices from above can now be initialized as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sg = initialize(Keysight33612A)\np = initialize(SRSPS310)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Cool Tip: Since we specified an alias for the signal generator we can initialize it this way as well:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sg = initialize(OleBigSG)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(No dashes, spaces or other special characters in alias names, treat them like variables, because they are.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"To send custom commands where no return response is expected use the write() function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> write(instr, \"<SCPI command>\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"If the device is sending a response to the command use query() instead:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> response = query(instr, \"<SCPI command>\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"The convenience functions f_query() and i_query() parse the response string to a Float64 and Int64, respectively.","category":"page"},{"location":"#General-Usage","page":"Home","title":"General Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To connect to an instrument you must know its model and IP address:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TcpInstruments\ninstrument_handle = initialize(AgilentDSOX4034A, \"10.1.30.32\")\ninfo(instrument_handle)\ndata = get_data(instrument_handle)\nsave(data)","category":"page"},{"location":"","page":"Home","title":"Home","text":"When you are done you can close your connection:","category":"page"},{"location":"","page":"Home","title":"Home","text":"terminate(instrument_handle)","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you do not know the ip address of any devices on your network:","category":"page"},{"location":"","page":"Home","title":"Home","text":"scan_network()","category":"page"},{"location":"","page":"Home","title":"Home","text":"By default scan_network will check the addresses between 10.1.30.1 to 10.1.30.255 but you may need to scan a different range, say: 10.1.150.1-255","category":"page"},{"location":"","page":"Home","title":"Home","text":"scan_network(; ip_network=\"10.1.150.\")","category":"page"},{"location":"#Units","page":"Home","title":"Units","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package uses Unitful.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In order to control certain devices it is required to run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Unitful","category":"page"},{"location":"","page":"Home","title":"Home","text":"Commands such as:","category":"page"},{"location":"","page":"Home","title":"Home","text":"set_voltage_offset(instr, 0)","category":"page"},{"location":"","page":"Home","title":"Home","text":"will not work you must specify the units:","category":"page"},{"location":"","page":"Home","title":"Home","text":"set_voltage_offset(instr, 0u\"V\")","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Continious-sine-wave-with-a-signal-generator-(in-this-case-the-Keysight-33612A):","page":"Home","title":"Continious sine wave with a signal generator (in this case the Keysight 33612A):","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"sg = initialize(Keysight33612A, \"10.1.30.36\")\nset_mode_cw(sg)               # Set to continuous waveform mode\nset_function(sg, \"SIN\")\nset_frequency(sg, 1u\"kHz\")\nset_amplitude(sg, 0.1u\"V\")\nset_voltage_offset(sg, 100u\"mV\")\nenable_output(sg)             # sine output starts here","category":"page"},{"location":"#Power-Supplies","page":"Home","title":"Power Supplies","text":"","category":"section"},{"location":"#VersatilePower","page":"Home","title":"VersatilePower","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# Initialize automatically puts this power supply in remote mode\npwr = initialize(VersatilePower)\n\nset_voltage(pwr, 20u\"V\")\nset_current_limit(pwr, 4u\"A\")\nenable_output(pwr)\n\n# Closes connection as with other devices but also puts this\n# device back into local mode\nterminate(pwr)","category":"page"},{"location":"#AgilentE36312A","page":"Home","title":"AgilentE36312A","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"pwr = initialize(AgilentE36312A)\n\nset_channel(pwr, 1)\nset_current_limit(pwr, 1)\nset_voltage(pwr, 2u\"V\")\nenable_output(pwr) # Enables output on channel 1\n\nset_channel(pwr, 2)\nset_voltage(pwr, 10u\"V\")\nenable_output(pwr) # Enables output on channel 2\n\nset_channel(pwr, 3)\nset_voltage(pwr, 10u\"V\")\n\nset_voltage(pwr, 0u\"V\"; chan=1) # Changes voltage of channel 1\n\nget_voltage(pwr) # Get voltage channel 3\nget_voltage(pwr; chan=2)\nget_voltage(pwr; chan=1)\n\nenable_output(pwr) # Enables output on channel 3","category":"page"},{"location":"#GPIB-Power-Supply-(SRSPS310)-used-with-Prologix-Controller","page":"Home","title":"GPIB Power Supply (SRSPS310) used with Prologix Controller","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To a initialize a device that is connected with a prologix controller you must specify what prologix channel the device is on. At this moment the prologix adapter is the only supported GPIB to Ethernet adapter.","category":"page"},{"location":"","page":"Home","title":"Home","text":"p = initialize(SRSPS310, \"10.1.30.37:1234\"; GPIB_ID=2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you don't know the channel you can figure it out and configure it manually:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using TcpInstruments\njulia> p = initialize(SRSPS310, \"10.1.30.37:1234\")\njulia> scan_prologix(p)\n2 => \"PS310\"\njulia> set_prologix(p, 2)\njulia> get_prologix(p)\n2","category":"page"},{"location":"","page":"Home","title":"Home","text":"Using SRSPS310 Power Supply:","category":"page"},{"location":"","page":"Home","title":"Home","text":"p = initialize(SRSPS310, \"10.1.30.37:1234\"; GPIB_ID=2)\nset_voltage_limit(p, 1250u\"V\")\nset_voltage(p, 1250u\"V\")\nset_current_limit(p, 0.021u\"A\") # equivalent to set_current_limit(p, 21u\"mA\")\nenable_output(p)","category":"page"},{"location":"#Oscilloscopes","page":"Home","title":"Oscilloscopes","text":"","category":"section"},{"location":"#AgilentDSOX4034A","page":"Home","title":"AgilentDSOX4034A","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"scope = initialize(AgilentDSOX4034A)\n\n# Turn on Low Pass Filter 25MHz\nlpf_on(scope)\n\n# See that low pass filter is on\nget_lpf_state(scope)\n\n# Turn Off Low Pass Filter 25MHz\nlpf_off(scope)\n\n# See that low pass filter is off\nget_lpf_state(scope)\n\n\nset_impedance_1Mohm(scope)\n@info get_impedance(scope)\n\nset_impedance_50ohm(scope)\n@info get_impedance(scope)\n\n# Get data from channel 1\ndata = get_data(scope, 1)\n\n# Get data from channel 1, 2, & 4\n# Returns 3 element array of data from each channel\nmulti_data = get_data(scope, [1,2, 4])\n\n\nusing Plots\n\nplot(data)\n\n# Plots channel 1\nplot(multi_data[1])\n\n# Plots channel 2\nplot(multi_data[2])\n\n# Plots channel 4\nplot(multi_data[3])\n\n# Saves data to a file\nsave(multi_data)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additionally you can grab data from all open channels (Let's say only channels 1 & 2 are activated for now)","category":"page"},{"location":"","page":"Home","title":"Home","text":"scope = initialize(AgilentDSOX4034A)\ndata = get_data(scope)    ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since the only activated channels are now only 1 & 2 this returns an array of waves (equivalent to `get_data(scope, [1,2]))","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also plot multiple waves at once:","category":"page"},{"location":"","page":"Home","title":"Home","text":"plot(data)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: wave)","category":"page"},{"location":"#Impedance-Analyzers","page":"Home","title":"Impedance Analyzers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TODO: example with the Agilent4294A.","category":"page"},{"location":"#Multiple-devices","page":"Home","title":"Multiple devices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Lets say you want to use a signal generator, power supply and oscilloscope all at once.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TcpInstruments\nusing Plots; plotly()\n\nscope = initialize(AgilentDSOX4034A)\npwr   = initialize(VersatilePower)\nsg    = initialize(Keysight33612A)\n\nset_mode_cw(sg)\nset_function(sg, \"SIN\")\nset_frequency(sg, 1000u\"Hz\")\nset_amplitude(sg, 0.1u\"A\")\nset_voltage_offset(sg, 0u\"V\")\nenable_output(sg)\n\nset_voltage(pwr, 20u\"V\")\nset_current_limit(pwr, 4u\"A\")\nenable_output(pwr)\n\ndata_array = get_data(scope, [1,2])\nplot(data_array)","category":"page"}]
}
